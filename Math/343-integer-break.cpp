// 343. 整数拆分
// 给定一个正整数 n ，将其拆分为 k 个 正整数 的和（ k >= 2 ），并使这些整数的乘积最大化。

// 返回 你可以获得的最大乘积 。

 

// 示例 1:

// 输入: n = 2
// 输出: 1
// 解释: 2 = 1 + 1, 1 × 1 = 1。
// 示例 2:

// 输入: n = 10
// 输出: 36
// 解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。
 

// 提示:

// 2 <= n <= 58

class Solution {
public:
    int integerBreak(int n) {
        if(n <= 3) return n - 1;
        int a = n / 3, b = n % 3;

		// 当 b = 0 时，直接返回 3^a；
		// 当 b = 1 时，要将一个 1 + 3 转换为 2 + 2，因此返回 3^{a-1} × 4；
		// 当 b = 2 时，返回 3^a × 2。
        if(b == 0) return pow(3, a);
        if(b == 1) return pow(3, a - 1) * 4;
        return pow(3, a) * 2;
    }
};